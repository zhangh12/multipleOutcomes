% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multipleOutcomes.R
\name{multipleOutcomes}
\alias{multipleOutcomes}
\title{Fitting Regression Models for Multiple Outcomes and Returning the Matrix of
Covariance}
\usage{
multipleOutcomes(
  ...,
  data,
  family = NULL,
  data_index = NULL,
  nboot = 0,
  compute_cov = TRUE,
  seed = NULL,
  score_epsilon = 1e-06
)
}
\arguments{
\item{...}{formulas of models to be fitted, or moment functions for gmm.}

\item{data}{a data frame if all models are fitted on the same dataset;
otherwise a list of data frames for fitting models in \code{...}. Note that a
dataset can be used to fit multiple models, thus, \code{length(data)} is unnecessary
to be equal to the number of models in \code{...}. The row names in a data frame
are treated as sample IDs. Consequently, for any two records in different
data frames that correspond to the same sample, their row names should be
consistent.}

\item{family}{a character vector of families to be used in the models.
Currently only \code{gaussian}, \code{binomial}, \code{coxph}, \code{logrank}, \code{gmm} and \code{gee}
are supported. To analyze longitudinal data and repeated measurements,
\code{family} should be something like \code{gee+id+family+corstr},
where id is the column name defining cluster (i.e. one patient per cluster).
The covariance estimate may be inaccurate if number of clusters is too small.
The supported families for \code{gee} include \code{gaussian}, \code{binomial},
\code{poisson}, \code{Gamma}, and \code{quasi}. The supported correlation structures include
\code{independence}, \code{stat_M_dep}, \code{non_stat_M_dep}, \code{exchangeable}, \code{AR-M}
and \code{unstructured}. So a valid family string is like \code{gee+user_id+binomial+exchangeable}.
\code{family} can be of length 1 if all models are fitted in the
same family; otherwise family should be specified for each of the models.}

\item{data_index}{\code{NULL} if \code{data} is a data frame; otherwise, a vector in
integer specifying mapping a model in \code{...} to a data frame in \code{data} (a list).}

\item{nboot}{non-zero integer if bootstrap is adopted. By default 0.}

\item{compute_cov}{logic. If \code{TRUE}, empirical covariance matrix is computed
using bootstrap estimate and returned. Bootstrap estimate will be abandoned. If
\code{FALSE}, bootstrap estimate will be returned and no empirical covariance
matrix is computed.}

\item{seed}{random seed when generate bootstrap data.}

\item{score_epsilon}{whatever.}
}
\value{
It returns an object of class "multipleOutcomes", which is a list
containing the following components:
\tabular{ll}{
\code{coefficients} \tab an unnamed vector of coefficients of all fitted models.
Use \code{id_map} for variable mapping. \cr
\tab \cr
\code{mcov} \tab a unnamed matrix of covariance of \code{coefficients}. Use \code{id_map}
for variable mapping. \cr
\tab \cr
\code{id_map} \tab a list mapping the elements in \code{coefficients} and \code{mcov} to
variable names. \cr
\tab \cr
\code{n_shared_sample_sizes} \tab a matrix of shared sample sizes between datasets
being used to fit the models. \cr
\tab \cr
\code{call} \tab the matched call.\cr
}
}
\description{
\code{multipleOutcomes} can fit different types of models for multiple outcomes
simultaneously and return model parameters and variance-covariance matrix
for further analysis.
}
\examples{
## More examples can be found in the vignettes.
library(mvtnorm)
genData <- function(seed = NULL){

  set.seed(seed)
  n <- 400
  sigma <- matrix(c(1, .6, .6, 1), 2)
  x <- rmvnorm(n, sigma = sigma)
  gam <- c(.1, -.2)
  z <- rbinom(n, 1, plogis(1-1/(1+exp(-.5+x\%*\%gam+.1*rnorm(n)))))

  bet <- c(-.2,.2)
  #y <- rbinom(n, 1, plogis(1-1/(1+exp(-.5+x\%*\%bet + .2*z-.3*rnorm(n)))))
  y <- -.5+x\%*\%bet + .2*z-.3*rnorm(n)

  data.frame(y = y, z = z, x1 = x[, 1], x2 = x[, 2])

}

dat <- genData(123456)
dat1 <- head(dat,200)
dat2 <- tail(dat,200)
## fitting four models simultaneously.
fit <-
  multipleOutcomes(
    y ~ z + x1 - 1,
    z ~ x1 + x2,
    z ~ x1 - 1,
    y ~ x2,
    ## z can be fitted with a linear or logistic regression
    family = c('gaussian', 'binomial', 'gaussian','gaussian'),
    data = list(dat1, dat2),
    ## each dataset is used to fit two models
    data_index = c(1, 1, 2, 2)
  )

  ## unnamed coefficients of all model parameters
  coef(fit)

  ## named coefficients of a specific model
  coef(fit, 2)

  ## unnamed covariance matrix of all model parameters
  vcov(fit)

  ## named covariance matrix of a specific model
  vcov(fit, 1)

  ## summary of all parameter estimates
  summary(fit)

  ## summary of parameters in a specific model
  summary(fit, 4)

}
